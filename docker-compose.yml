version: "3.5"

networks:
  vccnet:
    name: ${COMPOSE_PROJECT_NAME}net
    # driver: bridge

volumes:
  notused:
  postgres-data:

services:
  vcc.client:
    image: ${COMPOSE_PROJECT_NAME}.client:alpine
    # depends_on:
    #   db:
    #     condition: service_healthy
    #   vcc.server:
    #     condition: service_healthy
    build:
      context: .
      dockerfile: docker/Dockerfile.client.alpine
    tty: true
    stdin_open: true
    working_dir: /usr/src/app
    env_file:
      - ".env"
    environment:
      NODE_ENV: production
    ports:
      - 8080:8080
    volumes:
      - ./client:/usr/src/app
      - notused:/usr/src/app/node_modules
    networks:
      - ${COMPOSE_PROJECT_NAME}net
    command: vite
    # https://github.com/webpack/webpack-dev-server/issues/547#issuecomment-284737321
    # https://medium.com/@andyccs/webpack-and-docker-for-development-and-deployment-ae0e73243db4#.v0vhqvvjl
    # --host 0.0.0.0
    # command: webpack-dev-server --host 0.0.0.0
    entrypoint: /usr/local/bin/docker-entrypoint-client-a.sh

  vcc.server:
    image: ${COMPOSE_PROJECT_NAME}.server:alpine
    # depends_on:
    #   db:
    #     condition: service_healthy
    build:
      context: .
      dockerfile: docker/Dockerfile.server.alpine
    tty: true
    stdin_open: true
    working_dir: /usr/src/app
    env_file:
      - ".env"
    ports:
      - 5000:5000
    volumes:
      - ./server:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - ${COMPOSE_PROJECT_NAME}net
    command: ["docker-entrypoint-server-a.sh", "db", "yarn", "start"]
    # entrypoint: /usr/local/bin/docker-entrypoint-server-a.sh
    # https://stackoverflow.com/questions/31746182/docker-compose-wait-for-container-x-before-starting-y
    # https://stackoverflow.com/a/31753726/12658653
    # https://marcopeg.com/2019/docker-compose-healthcheck
    # healthcheck:
    #     test: ["CMD", "curl", "-f", "http://localhost:5000/graphql"]
    #     interval: 45s
    #     timeout: 10s
    #     retries: 10
    # links:
    #   - db
    restart: on-failure

  # # https://gist.github.com/onjin/2dd3cc52ef79069de1faa2dfd456c945
  # :Z for linux
  db:
    image: postgres:12
    # restart: always
    restart: unless-stopped
    # file must end in .sql not .psql
    volumes:
      - ./db/init:/docker-entrypoint-initdb.d/:ro
      - ./db/data/postgres-data:/var/lib/postgresql/data:Z
    env_file:
      - ".env"
    ports:
      - 5432:5432
    networks:
      - ${COMPOSE_PROJECT_NAME}net
    # healthcheck:
    #     test: [ "CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}" ]
    #     timeout: 45s
    #     interval: 10s
    #     retries: 10
