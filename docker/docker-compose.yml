version: "3.5"

networks:
  vccnet:
    name: ${COMPOSE_PROJECT_NAME}net
    # driver: bridge

volumes:
  notused:
  postgres-data:
  redis: {} # or :ro ; :rw

services:

  redis:
    image: 'redis:3.2-alpine'
    ports: 
      - '${REDIS_PORT}:${REDIS_PORT}'
    volumes:
      - 'redis:/data'
    networks:
      - ${COMPOSE_PROJECT_NAME}net

  db:
    image: postgres:12
    restart: unless-stopped
    volumes:
      - ./db/postgres/init:/docker-entrypoint-initdb.d/:ro
      - ${PWD}/db/postgres/postgres-data:${PGVOLUME}

    env_file:
      - ".env"
    ports:
      - 5432:5432
    networks:
      - ${COMPOSE_PROJECT_NAME}net
  
  vcc.server:
    image: ${COMPOSE_PROJECT_NAME}.server:alpine
    depends_on:
      - db
      - redis
    build:
      context: ../
      dockerfile: docker/server/Dockerfile.server.alpine
    tty: true
    stdin_open: true
    working_dir: /usr/src/app
    env_file:
      - ".env"
    ports:
      - 5000:5000
    volumes:
      - ./server:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - ${COMPOSE_PROJECT_NAME}net
    command: ["docker-entrypoint-server-a.sh", "${POSTGRES_HOST}", "yarn", "start"]
    # entrypoint: /usr/local/bin/docker-entrypoint-server-a.sh

  vcc.client:
    image: ${COMPOSE_PROJECT_NAME}.client:alpine
    depends_on:
      - db
    build:
      context: ../
      dockerfile: docker/client/Dockerfile.client.alpine
    tty: true
    environment:
      NODE_ENV: development
    ports:
      - 8080:8080
    volumes:
      - ./client:/usr/src/app
      - notused:/usr/src/app/node_modules
    networks:
      - ${COMPOSE_PROJECT_NAME}net
    command: yarn vite
